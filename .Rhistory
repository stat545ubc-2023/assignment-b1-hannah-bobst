library(palmerpenguins)
library(tidyverse)
library(gapminder)
max_values <- function(data, ..., vars, na.rm = TRUE){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
max_values(data = penguins,
species,
vars = bill_length_mm)
check <- penguins %>%
group_by(species, island) %>%
filter(species == "Adelie", island == "Biscoe")
is.data.frame(penguins)
knitr::opts_chunk$set(echo = TRUE)
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame format, stop function and print error message
if(is.data.frame(data) == FALSE){
stop("Data set must be a data frame")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = penguins,
species,
vars = bill_length_mm)
max_values(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
max_values(data = as.vector(penguins),
species,
vars = bill_length_mm)
max_values(data = penguins,
species,
vars = bill_length_mm)
max_values <- function(data, ..., vars, na.rm = TRUE){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = as.tibble(penguins),
species, island,
vars = bill_length_mm:body_mass_g)
max_values(data = as_tibble(penguins),
species, island,
vars = bill_length_mm:body_mass_g)
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = as_tibble(penguins),
species, island,
vars = bill_length_mm:body_mass_g)
max_values(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
max_values <- function(data, ..., vars, na.rm = TRUE){
if(is.numeric({{vars}}) == FALSE){
stop("error")
}
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
class(penguins$species)
class(penguins$bill_length_mm)
class(penguins$bill_length_mm) == "numeric"
penguins %>%
class(bill_length_mm, bill_depth_mm)
penguins %>%
class(bill_length_mm)
penguins %>%
class("bill_length_mm")
penguins %>%
select_if(is.numeric == FALSE)
penguins %>%
select_if(!is.numeric)
penguins %>%
select_if(~!is.numeric(.x))
penguins %>%
select(bill_length_mm:body_mass_g) %>%
select_if(~!is.numeric(.x))
check2 <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
select_if(~!is.numeric(.x))
check2
check2 == 0
check2 <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
select_if(~!is.numeric(.x))
if(check2 == 0){
TRUE
}
check2 <- penguins %>%
select(bill_length_mm:body_mass_g) %>%
select_if(~!is.numeric(.x))
check2
nrow(check2)
penguins %>%
select(bill_length_mm:body_mass_g) %>%
if(~!is.numeric(.x)){
stop("wrong")
}
is.numeric(penguins)
check2 <- penguins %>%
select(bill_length_mm:body_mass_g)
check2
is.numeric(check2)
is.numeric(check2$bill_length_mm)
is.numeric(check2$flipper_length_mm)
is.numeric(check2$bill_length_mm, check2$bill_depth_mm)
# Create function to summarize max values of user-specified groupings and variables
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
max_values(data = penguins,
species,
vars = bill_length_mm)
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame or tibble and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized
#' @param ... Additional function arguments specifying the groups.
#' @return A tibble summarizing the maximum values of each group and variable.
#'
#' @import tidyverse
# Create function to summarize max values of user-specified groupings and variables
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
?max_values
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame or tibble and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized
#' @param ... Additional function arguments specifying the groups.
#' @return A tibble summarizing the maximum values of each group and variable.
#'
#' @import tidyverse
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
?max_values
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame or tibble and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized.
#' @param ... Additional function arguments specifying the groups.
#' @param na.rm A Boolean variable matching the argument name "na.rm" in the "max" function. Default input is TRUE, which removes NA values.
#' @return A tibble summarizing the maximum values of each group and variable.
#'
#' @import tidyverse
#'
#' ```
#' max_values <- function(data, ..., vars, na.rm = TRUE){
#'  # If data is not in data frame or tibble format, stop function and print error message
#'  if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
#'    stop("Data set must be a data frame or tibble")
#'  }
#'  # Produce maximum of user-specified variables for user-specified groupings
#'  data %>%
#'    group_by(...) %>%
#'    summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
#'}
#' ```
max_values
?max_values
devtools:::document()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame or tibble and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized.
#' @param ... Additional function arguments specifying the groups.
#' @param na.rm A Boolean variable matching the argument name "na.rm" in the "max" function. Default input is TRUE, which removes NA values.
#' @return A tibble summarizing the maximum values of each group and variable.
#'
#' @import tidyverse
#'
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
# Load data set package
library(palmerpenguins)
penguins
# Summarize maximum values of variables bill_length_mm to body_mass_g by species and island
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
library(tidyverse)
# Summarize maximum values of variables bill_length_mm to body_mass_g by species and island
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
library(palmerpenguins)
library(tidyverse)
library(gapminder)
# Curly Curly Example #
# Make function (doesn't work)
count_miss_by_group_1 <- function(data, group){
data %>%
group_by(group) %>%
summarize(across(everything(), ~ sum(is.na(.x))))
}
# Sample data set
demo_tbl <- tribble(~student_id, ~group,
100, 1,
NA, 1,
103, 2,
105, 2)
# Try with sample data set (works since "group" is a column name)
count_miss_by_group_1(demo_tbl, species)
# New function
count_miss_by_group <- function(data, group){
data %>%
group_by({{group}}) %>%
summarize(across(everything(), ~ sum(is.na(.x))))
}
# Try new function with different data sets (works)
count_miss_by_group(penguins, species)
count_miss_by_group(gapminder, continent)
# Multi-argument function
count_miss_by_group_multi <- function(data, group, vars){
data %>%
group_by({{group}}) %>%
summarize(across({{vars}}, ~ sum(is.na(.x))))
}
# Try function
count_miss_by_group_multi(penguins, species, bill_length_mm:body_mass_g)
count_miss_by_group_multi(gapminder, continent, c(year, pop))
# -------------------------- #
## Ellipses Example ##
# Function
count_miss_by_groups <- function(data, ..., vars){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ sum(is.na(.x))))
}
# Try function
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
# Function (with defaults)
count_miss_by_groups <- function(data, ..., vars, .groups = "drop"){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ sum(is.na(.x))),
.groups = .groups)
}
# Try function
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g,
.groups = "keep")
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
count_miss_by_groups <- function(data, ..., vars){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ sum(is.na(.x))))
}
# Try function
count_miss_by_groups(data = penguins,
species, island,
vars = bill_length_mm:body_mass_g)
count_miss_by_groups <- function(data, ..., vars, .groups = "drop"){
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ sum(is.na(.x))),
.groups = .groups)
knitr::opts_chunk$set(echo = TRUE)
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame or tibble and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized.
#' @param ... Additional function arguments specifying the groups.
#' @param na.rm A Boolean variable matching the argument name "na.rm" in the "max" function. Default input is TRUE, which removes NA values.
#' @return A tibble summarizing the maximum values of each group and variable.
#'
#' @import tidyverse
#'
max_values <- function(data, ..., vars, na.rm = TRUE){
# If data is not in data frame or tibble format, stop function and print error message
if(is.data.frame(data) == FALSE && is.tibble(data) == FALSE){
stop("Data set must be a data frame or tibble")
}
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
# Summarize maximum values of variables bill_length_mm to body_mass_g by species and island
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
# Load packages
library(palmerpenguins)
library(tidyverse)
# Summarize maximum values of variables bill_length_mm to body_mass_g by species and island
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
gapminder
# Load package
library(gapminder)
gapminder
# Summarize maximum values of variables lifeExp to gdpPercap by country and continent
max_values(data = gapminder, country, continent, vars = lifeExp:gpdPercap, na.rm = TRUE)
# Load package
library(gapminder)
# Summarize maximum values of variables lifeExp to gdpPercap by country and continent
max_values(data = gapminder, country, continent, vars = lifeExp:gpdPercap, na.rm = TRUE)
gapminder
# Summarize maximum values of variables lifeExp to gdpPercap by country and continent
max_values(data = gapminder, country, continent, vars = lifeExp:gdpPercap, na.rm = TRUE)
# Summarize maximum values of variables lifeExp to gdpPercap by country and continent
max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE)
# Find maximum value of variable gdpPercap by continent
max_values(data = gapminder, continent, vars = gpdPercap, na.rm = TRUE)
# Find maximum value of variable gdpPercap by continent
max_values(data = gapminder, continent, vars = gdpPercap, na.rm = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#' @title Group data and summarize maximums of selected variables
#'
#' @description max_values groups a data frame (or data frame extension) and maximizes the variables. The groups and variables to be maximized are specified in the function arguments.
#'
#' @param data A data frame or tibble.
#' @param vars A character vector with the variables (vars) to be maximized. These variable names must correspond to columns with numerical entries.
#' @param ... Additional function arguments specifying the groups. These arguments must be character values corresponding to column names.
#' @param na.rm A Boolean variable matching the argument name "na.rm" in the "max" function. Default input is TRUE, which removes NA values.
#' @return A tibble summarizing the maximum values of variable by groups.
#'
#' @import tidyverse
#' @export
max_values <- function(data, ..., vars, na.rm = TRUE){
# Produce maximum of user-specified variables for user-specified groupings
data %>%
group_by(...) %>%
summarize(across({{vars}}, ~ max(.x, na.rm = na.rm)))
}
# Load packages
library(palmerpenguins)
library(tidyverse)
# Summarize maximum values of variables bill_length_mm to body_mass_g by species and island
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
# Load package
library(gapminder)
# Summarize maximum values of variables lifeExp to gdpPercap by continent and country
max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE)
# Find maximum values of variable gdpPercap by continent
max_values(data = gapminder, continent, vars = gdpPercap, na.rm = TRUE)
# Load package for testing
library(testthat)
# Load package for testing
library(testthat)
expect_output(max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE), "5 variables")
check <- penguins %>%
group_by(species, island) %>%
filter(species == "Adelie", island == "Biscoe")
check
check3 <- gapminder %>%
group_by(continent, country) %>%
summarize(across(lifeExp:gdpPercap, ~ max(.x, na.rm = TRUE)))
check3
expect_equal(max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE), check3)
test_that("Output is correct", expect_equal(max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE), check3)
)
# Load package for testing
library(testthat)
## Manual calculations
# Example 1
manual_1 <- penguins %>%
group_by(species, island) %>%
summarize(across(bill_length_mm:body_mass_g, ~ max(.x, na.rm = TRUE)))
# Example 2
manual_2 <- gapminder %>%
group_by(continent, country) %>%
summarize(across(lifeExp:gdpPercap, ~ max(.x, na.rm = TRUE)))
# Example 3
manual_3 <- gapminder %>%
group_by(continent) %>%
summarize(across(gdpPercap, ~ max(.x, na.rm = TRUE)))
## Function calculations
# Example 1
function_1 <- max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
# Example 2
function_2 <- max_values(data = gapminder, continent, country, vars = lifeExp:gdpPercap, na.rm = TRUE)
# Example 3
function_3 <- max_values(data = gapminder, continent, vars = gdpPercap, na.rm = TRUE)
# Test for equality
test_that("Output is correct", {
expect_equal(manual_1, function_1)
expect_equal(manual_2, function_2)
expect_equal(manual_3, function_3)})
max_values(data = gapminder, continent, country,
vars = lifeExp:gdpPercap, na.rm = FALSE)
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = TRUE)
max_values(data = penguins, species, island, vars = bill_length_mm:body_mass_g, na.rm = FALSE)
